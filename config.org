#+TITLE: XYU的Doom Emacs 配置

* 个人信息
** 用于加密等
#+begin_src emacs-lisp
(setq user-full-name "Jason Chao"
      user-mail-address "jason@chao.com")
#+end_src
* UI 配置
** 设置 doom theme、行号等
#+begin_src emacs-lisp
;;(setq doom-theme 'doom-vibrant)
(setq doom-theme 'doom-zenburn)
(setq display-line-numbers-type t) ;;行号
(global-visual-line-mode 1) ;;换行
;;美化buffer name
(setq doom-fallback-buffer-name "► Doom"
      +doom-dashboard-name "► Doom")
;;字体
;;
;
#+end_src
** Dashboard 配置
** 启动窗口大小
#+begin_src emacs-lisp
(pushnew! initial-frame-alist '(width . 220) '(height . 80))
#+end_src
** doom-modeline 配置
#+begin_src emacs-lisp
;;默认修改中的文件名颜色是红色，这里改为orange
(custom-set-faces!
  '(doom-modeline-buffer-modified :foreground "orange"))
;;将modeline的高度从默认的25改为45
(setq doom-modeline-height 45)
;; 当文件不是utf编码时才显示提示，否则隐藏
(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (and (memq (plist-get (coding-system-plist buffer-file-coding-system) :category)
                                 '(coding-category-undecided coding-category-utf-8))
                           (not (memq (coding-system-eol-type buffer-file-coding-system) '(1 2))))
                t)))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
;;设置modeline中展示的内容
(after! doom-modeline
  (custom-set-variables '(doom-modeline-buffer-file-name-style 'relative-to-project)
                        '(doom-modeline-major-mode-icon t)
                        '(doom-modeline-modal-icon nil))
  (nyan-mode t)) ;;彩虹猫
;; open dashboard
;;(map! :leader :desc "Dashboard" "d" #'+doom-dashboard/open)
#+end_src
* 通用配置
** 自动保存
#+begin_src emacs-lisp
(setq auto-save-visited-mode t)
(auto-save-visited-mode +1)
(setq auto-revert-use-notify nil)
#+end_src
** Evil 模式下在窗口间快速移动
#+begin_src emacs-lisp
(map! :map evil-window-map
      "SPC" #'rotate-layout
      ;; 方向
      "<left>"   #'evil-window-left
      "<down>"   #'evil-window-down
      "<up>"     #'evil-window-up
      "<right>"  #'evil-window-right
      ;; 交换窗口
      "C-<left>"   #'+evil/window-move-left
      "C-<down>"   #'+evil/window-move-down
      "C-<up>"     #'+evil/window-move-up
      "C-<right>"  #'+evil/window-move-right
      )
#+end_src
** 增加几个 Bookmark 命令
- SPC b m：设置 bookmark
- SPC b L：列出 bookmark
- SPC b w：保存 bookmark 到一个文件中
#+begin_src emacs-lisp
(map! :leader
      (:prefix ("b". "buffer")
       :desc "List bookmarks" "L" #'list-bookmarks
       :desc "Save current bookmarks to bookmark file" "w" #'bookmark-save))
#+end_src
* Org-mode 配置
** Org 默认目录
#+begin_src emacs-lisp
(after! org (setq org-directory "~/Org-Notes/"))
#+end_src
** 美化 Org
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (variable-pitch-mode 1)
            visual-line-mode))
;;
(setq org-hide-emphasis-markers t
      org-fontify-done-headline t
      org-odd-levels-only t
      ;;org-hide-leading-stars t
      org-log-done 'time
      org-pretty-entities t)
;;更改层级列表的样式
(setq org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("*" . "+") ("1." . "a.")))
#+end_src
** 设置 TODO 的默认配置
(t)代表快捷字母；!代表时间戳；@代表一个有时间戳的记录笔记
#+begin_src emacs-lisp
(after! org (setq org-todo-keywords
      '((sequence "TODO(t)" "IN-PROGRESS(i)" "WAITING(w)" "DELEGATED(e!)" "|" "DONE(d@/!)" "CANCELED(c@/!)"))))
#+end_src
** 设置 Org-agenda
*** 配置可检索的 Agenda 文件
#+begin_src emacs-lisp
(after! org (setq org-agenda-files
      (quote ("~/Org-Notes/" "~/Org-Notes/work/" "~/Org-Notes/personal/"))))
;;设置默认的视图模式，doom默认为week视图，此配置暂时屏蔽
;;(setq org-agenda-span 'week)
;;(setq org-agenda-span 'day)
#+end_src
*** 学习 网上设置，设置新的 agenda 网格，以 3 小时为一单元
#+begin_src emacs-lisp
(setq org-agenda-time-grid (quote ((daily today require-timed)
                                   (300
                                    600
                                    900
                                    1200
                                    1500
                                    1800
                                    2100
                                    2400)
                                   "......"
                                   "-----------------------------------------------------"
                                   )))
#+end_src
*** 日记配置
#+begin_src emacs-lisp
;;设置location，以便计算日出日落时间
(setq calendar-longitude 116.9962)
(setq calendar-latitude 39.91)
;;计算sunrise和sunset的时间
(defun diary-sunrise ()
  (let ((dss (diary-sunrise-sunset)))
    (with-temp-buffer
      (insert dss)
      (goto-char (point-min))
      (while (re-search-forward " ([^)]*)" nil t)
        (replace-match "" nil nil))
      (goto-char (point-min))
      (search-forward ",")
      (buffer-substring (point-min) (match-beginning 0)))))

(defun diary-sunset ()
  (let ((dss (diary-sunrise-sunset))
        start end)
    (with-temp-buffer
      (insert dss)
      (goto-char (point-min))
      (while (re-search-forward " ([^)]*)" nil t)
        (replace-match "" nil nil))
      (goto-char (point-min))
      (search-forward ", ")
      (setq start (match-end 0))
      (search-forward " at")
      (setq end (match-beginning 0))
      (goto-char start)
      (capitalize-word 1)
      (buffer-substring start end))))
;;diary文件位置
(setq org-agenda-include-diary t)
(setq org-agenda-diary-file "~/Org-Notes/personal/mydiary")
(setq diary-file "~/Org-Notes/personal/mydiary")
#+end_src
*** 习惯配置
#+begin_src emacs-lisp
(add-to-list 'org-modules 'org-habit t)
(setq org-habit-graph-column t)
#+end_src
*** Capture 模板配置
#+begin_src emacs-lisp
;;自定义函数，用于定位everyday.org中的几个关键heading的位置
(defun my-org-goto-last-worklog-headline ()
  "Move point to the last headline in file matching \"* WORKLOG\"."
  (end-of-buffer)
  (re-search-backward "\\* WORKLOG"))

(defun my-org-goto-last-event-headline ()
  "Move point to the last headline in file matching \"* EVENTS\"."
  (end-of-buffer)
  (re-search-backward "\\* EVENTS"))

(defun my-org-goto-last-lifelog-headline ()
  "Move point to the last headline in file matching \"* LIFELOG\"."
  (end-of-buffer)
  (re-search-backward "\\* LIFELOG"))

;; org-capture模板
(after! org (setq org-capture-templates
      '(("t" "TASK" entry (file+headline "work/task.org" "Tasks")
         "* TODO %i%? [/] :@work: \n %U\n From: %a\n")
        ("n" "NOTE" entry (file "note.org")
         "* %i%? :NOTE: \n created on %T\n From: %a\n")
        ("m" "MEETING" entry (file+headline "work/meeting.org" "Meetings")
         "* TODO %i%? :MEETING:@work: \n created on %U\n")
        ("w" "WORKLOG" entry
         (file+function "everyday.org"
                        my-org-goto-last-worklog-headline)
         "* %i%? :@work: \n%T")
        ("l" "LIFELOG" entry
         (file+function "everyday.org"
                        my-org-goto-last-lifelog-headline)
         "* %i%? :@life: \n%T")
        ("e" "EVENT" entry
         (file+function "everyday.org"
                        my-org-goto-last-event-headline)
         "* %i%? \n%T"))))

#+end_src
*** newday 函数，用于在 everyday.org 中插入日结构
#+begin_src emacs-lisp
(defun newday ()
  (interactive)
  (progn
    (find-file "~/Org-Notes/everyday.org")
    (goto-char (point-max))
    (insert "*" ?\s (format-time-string "%Y-%m-%d %A") ?\n
            "** PLAN\n"
            "** WORKLOG\n"
            "** LIFELOG\n"
            "** EVENTS\n"
            "** REVIEW\n"
            "*** 今天最大的成果什么？ \n"
            "*** 今天有什么惊喜？ \n"
            "*** 今天有什么需要改进的地方？ \n"
            )))
#+end_src
** 简化文件插入链接
#+begin_src emacs-lisp
(defun +org-insert-file-link ()
  "Insert a file link.  At the prompt, enter the filename."
  (interactive)
  (insert (format "[[%s]]" (org-link-complete-file))))
;;
(map! :after org
      :map org-mode-map
      :localleader
      "l f" #'+org-insert-file-link)
#+end_src
* DIRED 配置
#+begin_src emacs-lisp
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump)
      (:after dired
       (:map dired-mode-map
        :desc "Peep-dired image previews" "d p" #'peep-dired
        :desc "Dired view file" "d v" #'dired-view-file)))

(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "Z") 'dired-do-compress
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-do-kill-lines
  (kbd "% l") 'dired-downcase
  (kbd "% m") 'dired-mark-files-regexp
  (kbd "% u") 'dired-upcase
  (kbd "* %") 'dired-mark-files-regexp
  (kbd "* .") 'dired-mark-extension
  (kbd "* /") 'dired-mark-directories
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
;;(setq dired-open-extensions '(("gif" . "sxiv")
;;                              ("jpg" . "sxiv")
;;                              ("png" . "sxiv")
;;                              ("mkv" . "mpv")
;;                              ("mp4" . "mpv")))
(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+end_src
* 其他包配置
** ivy-rich：显示命令的详细描述
#+begin_src emacs-lisp
(require 'ivy-rich)
(ivy-rich-mode 1)
(setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
#+end_src
** find-file-in-project：陈斌的插件，用于在项目中快速找到文件
#+begin_src emacs-lisp
(require 'find-file-in-project)
(ivy-mode 1)
(setq ffip-project-root "~/Org-Notes")
#+end_src
** Eros
#+begin_quote
来自:tool eval
#+end_quote
#+begin_src emacs-lisp
(setq eros-eval-result-prefix "⟹ ") ; default =>
#+end_src
** Company
来自:completion company
#+begin_src emacs-lisp
(after! company
  (setq company-idle-delay 0.5
        company-minimum-prefix-length 2)
  (setq company-show-numbers t)
  (add-hook 'evil-normal-state-entry-hook #'company-abort)) ;; make aborting less annoying.
;;增强history
(setq-default history-length 1000)
(setq-default prescient-history-length 1000)
#+end_src
** YASnippets
来自:editor snippets，开启 snippets 嵌套支持
#+begin_src emacs-lisp
(setq yas-triggers-in-field t)
#+end_src
** Smart Parentheses
来自:core packages，增加 org-mode 的配对
#+begin_src emacs-lisp
(sp-local-pair
 '(org-mode)
 "<<" ">>"
 :actions '(insert))
#+end_src
** AVY 配置：一个强大的方便跳转等操作的包
来自:config default
#+begin_src emacs-lisp
(after! avy
  ;; home row priorities: 8 6 4 5 - - 1 2 3 7
  (setq avy-keys '(?n ?e ?i ?s ?t ?r ?i ?a)))
#+end_src
** Emojis
来自:ui emoji
#+begin_src emacs-lisp
(use-package emojify
  :hook (after-init . global-emojify-mode))
#+end_src
