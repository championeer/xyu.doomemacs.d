#+TITLE: XYU的Doom Emacs 配置

* 个人信息
** 用于加密等
#+begin_src emacs-lisp
(setq user-full-name "Jason Chao"
      user-mail-address "jason@chao.com")
#+end_src
* UI 配置
** 设置 doom theme、行号等
#+begin_src emacs-lisp
(setq doom-theme 'doom-vibrant)
(setq display-line-numbers-type t) ;;行号
(global-visual-line-mode 1) ;;换行
;;美化buffer name
(setq doom-fallback-buffer-name "► Doom"
      +doom-dashboard-name "► Doom")
;;字体
(setq doom-font (font-spec :family "Source Code Pro" :size 15)
      doom-big-font (font-spec :family "Source Code Pro" :size 30)
      doom-variable-pitch-font (font-spec :family "Source Code Variable" :size 15)
      doom-unicode-font (font-spec :family "JuliaMono")
      doom-serif-font (font-spec :family "TeX Gyre Cursor")
      )
;;
;;(defun xyu/doom-init-ui-misc()
;;  (menu-bar-mode -1)               ;; disable menu-bar
;;  (setq-default cursor-type 'box)  ;; set box style cursor
;;  (blink-cursor-mode -1)           ;; cursor not blink
;;  <<doom-dashboard-layout>>
;;  (if (display-graphic-p)
;;      (progn
        ;; NOTE: ONLY GUI
        ;; set font
;;        (dolist (charset '(kana han symbol cjk-misc bopomofo gb18030))
;;          (set-fontset-font (frame-parameter nil 'font) charset
;;                            (font-spec :family "Source Han Mono")))
;;        (appendq! face-font-rescale-alist
;;                  '(("Source Han Mono" . 1.2)
;;                   ))
;;        <<doom-image-banner>>
        ;; random banner image from bing.com, NOTE: https://emacs-china.org/t/topic/264/33
;;        )
;;    (progn
      ;; NOTE: ONLY TUI
;;      <<doom-ascii-banner>>
;;      )))
;;(add-hook! 'doom-init-ui-hook #'xyu/doom-init-ui-misc)
;;
#+end_src
** 启动窗口大小
#+begin_src emacs-lisp
(pushnew! initial-frame-alist '(width . 220) '(height . 80))
#+end_src
** doom dashboard 配置（启动主页）
#+begin_src emacs-lisp
;;新的dashboard
(map! :map +doom-dashboard-mode-map
      :desc "org agenda" "a" #'org-agenda
      :desc "find file" "f" #'find-file
      :desc "recent session" "R" #'doom/quickload-session
      :desc "recent files" "r" #'counsel-recentf
      :desc "config dir" "C" #'doom/open-private-config
      :desc "open config.org" "c" (cmd! (find-file (expand-file-name "config.org" doom-private-dir)))
      ;; :desc "open dotfile" "." (cmd! (doom-project-find-file "~/.config/"))
      ;;:desc "notes (roam)" "n" #'org-roam-node-find
      :desc "switch buffer" "b" #'+vertico/switch-workspace-buffer
      ;; :desc "switch buffers (all)" "B" #'consult-buffer
      :desc "ibuffer" "i" #'ibuffer
      ;;:desc "open project" "p" #'counsel-projectile-switch-project
      ;; :desc "set theme" "t" #'consult-theme
      :desc "quit" "q" #'save-buffers-kill-terminal
      :desc "documentation" "H" #'doom/help
      :desc "show keybindings" "h" (cmd! (which-key-show-major-mode)))
;;去除老的dashboard
(remove-hook '+doom-dashboard-functions
             #'doom-dashboard-widget-shortmenu)
(add-hook! '+doom-dashboard-mode-hook (hide-mode-line-mode 1)
           (hl-line-mode 1))
#+end_src
** doom-modeline 配置
#+begin_src emacs-lisp
;;默认修改中的文件名颜色是红色，这里改为orange
(custom-set-faces!
  '(doom-modeline-buffer-modified :foreground "orange"))
;;将modeline的高度从默认的25改为45
(setq doom-modeline-height 45)
;; 当文件不是utf编码时才显示提示，否则隐藏
(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (and (memq (plist-get (coding-system-plist buffer-file-coding-system) :category)
                                 '(coding-category-undecided coding-category-utf-8))
                           (not (memq (coding-system-eol-type buffer-file-coding-system) '(1 2))))
                t)))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
;;设置modeline中展示的内容
(after! doom-modeline
  (custom-set-variables '(doom-modeline-buffer-file-name-style 'relative-to-project)
                        '(doom-modeline-major-mode-icon t)
                        '(doom-modeline-modal-icon nil))
  (nyan-mode t))
;; open dashboard
(map! :leader :desc "Dashboard" "d" #'+doom-dashboard/open)
#+end_src
* 通用配置
** 自动保存
#+begin_src emacs-lisp
(setq auto-save-visited-mode t)
(auto-save-visited-mode +1)
(setq auto-revert-use-notify nil)
#+end_src
** Evil 模式下在窗口间快速移动
#+begin_src emacs-lisp
(map! :map evil-window-map
      "SPC" #'rotate-layout
      ;; 方向
      "<left>"   #'evil-window-left
      "<down>"   #'evil-window-down
      "<up>"     #'evil-window-up
      "<right>"  #'evil-window-right
      ;; 交换窗口
      "C-<left>"   #'+evil/window-move-left
      "C-<down>"   #'+evil/window-move-down
      "C-<up>"     #'+evil/window-move-up
      "C-<right>"  #'+evil/window-move-right
      )
#+end_src
* Org-mode 配置
** Org 默认目录
#+begin_src emacs-lisp
(setq org-directory "~/Org-Notes/")
#+end_src
** 美化 Org
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (variable-pitch-mode 1)
            visual-line-mode))
;;
(setq org-hide-emphasis-markers t
      org-fontify-done-headline t
      org-odd-levels-only t
      ;;org-hide-leading-stars t
      org-pretty-entities t)
;;更改层级列表的样式
(setq org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("*" . "+") ("1." . "a.")))
#+end_src
** 设置 TODO 的默认配置
(t)代表快捷字母；!代表时间戳；@代表一个有时间戳的记录笔记
#+begin_src emacs-lisp
(after! org (setq org-todo-keywords
      '((sequence "TODO(t)" "IN-PROGRESS(i)" "WAITING(w)" "DELEGATED(e!)" "|" "DONE(d@/!)" "CANCELED(c@/!)"))))
#+end_src
** 设置 Org-agenda
*** 配置可检索的 Agenda 文件
#+begin_src emacs-lisp
(setq org-agenda-files
      (quote ("~/Org-Notes/" "~/Org-Notes/work/" "~/Org-Notes/personal/")))
;;设置默认的视图模式，doom默认为week视图，此配置暂时屏蔽
;;(setq org-agenda-span 'week)
;;(setq org-agenda-span 'day)
#+end_src
*** 学习 网上设置，设置新的 agenda 网格，以 3 小时为一单元
#+begin_src emacs-lisp
(setq org-agenda-time-grid (quote ((daily today require-timed)
                                   (300
                                    600
                                    900
                                    1200
                                    1500
                                    1800
                                    2100
                                    2400)
                                   "......"
                                   "-----------------------------------------------------"
                                   )))
#+end_src
*** 日记配置
#+begin_src emacs-lisp
;;设置location，以便计算日出日落时间
(setq calendar-longitude 116.9962)
(setq calendar-latitude 39.91)
;;计算sunrise和sunset的时间
(defun diary-sunrise ()
  (let ((dss (diary-sunrise-sunset)))
    (with-temp-buffer
      (insert dss)
      (goto-char (point-min))
      (while (re-search-forward " ([^)]*)" nil t)
        (replace-match "" nil nil))
      (goto-char (point-min))
      (search-forward ",")
      (buffer-substring (point-min) (match-beginning 0)))))

(defun diary-sunset ()
  (let ((dss (diary-sunrise-sunset))
        start end)
    (with-temp-buffer
      (insert dss)
      (goto-char (point-min))
      (while (re-search-forward " ([^)]*)" nil t)
        (replace-match "" nil nil))
      (goto-char (point-min))
      (search-forward ", ")
      (setq start (match-end 0))
      (search-forward " at")
      (setq end (match-beginning 0))
      (goto-char start)
      (capitalize-word 1)
      (buffer-substring start end))))
;;diary文件位置
(setq org-agenda-include-diary t)
(setq org-agenda-diary-file "~/Org-Notes/personal/mydiary")
(setq diary-file "~/Org-Notes/personal/mydiary")
#+end_src
*** 习惯配置
#+begin_src emacs-lisp
(add-to-list 'org-modules 'org-habit t)
(setq org-habit-graph-column t)
#+end_src
*** Caputre 模板配置
#+begin_src emacs-lisp
;;自定义函数，用于定位everyday.org中的几个关键heading的位置
(defun my-org-goto-last-worklog-headline ()
  "Move point to the last headline in file matching \"* WORKLOG\"."
  (end-of-buffer)
  (re-search-backward "\\* WORKLOG"))

(defun my-org-goto-last-event-headline ()
  "Move point to the last headline in file matching \"* EVENTS\"."
  (end-of-buffer)
  (re-search-backward "\\* EVENTS"))

(defun my-org-goto-last-lifelog-headline ()
  "Move point to the last headline in file matching \"* LIFELOG\"."
  (end-of-buffer)
  (re-search-backward "\\* LIFELOG"))

;; org-capture模板
(after! org (setq org-capture-templates
      '(("t" "TASK" entry (file+headline "work/task.org" "Tasks")
         "* TODO %i%? [/] :@work: \n %U\n From: %a\n")
        ("n" "NOTE" entry (file "note.org")
         "* %i%? :NOTE: \n created on %T\n From: %a\n")
        ("m" "MEETING" entry (file+headline "work/meeting.org" "Meetings")
         "* TODO %i%? :MEETING:@work: \n created on %U\n")
        ("w" "WORKLOG" entry
         (file+function "everyday.org"
                        my-org-goto-last-worklog-headline)
         "* %i%? :@work: \n%T")
        ("l" "LIFELOG" entry
         (file+function "everyday.org"
                        my-org-goto-last-lifelog-headline)
         "* %i%? :@life: \n%T")
        ("e" "EVENT" entry
         (file+function "everyday.org"
                        my-org-goto-last-event-headline)
         "* %i%? \n%T"))))

#+end_src
*** newday 函数，用于在 everyday.org 中插入日结构
#+begin_src emacs-lisp
(defun newday ()
  (interactive)
  (progn
    (find-file "~/Org-Notes/everyday.org")
    (goto-char (point-max))
    (insert "*" ?\s (format-time-string "%Y-%m-%d %A") ?\n
            "** PLAN\n"
            "** WORKLOG\n"
            "** LIFELOG\n"
            "** EVENTS\n"
            "** REVIEW\n"
            "*** 今天最大的成果什么？ \n"
            "*** 今天有什么惊喜？ \n"
            "*** 今天有什么需要改进的地方？ \n"
            )))
#+end_src
** 简化文件插入链接
#+begin_src emacs-lisp
(defun +org-insert-file-link ()
  "Insert a file link.  At the prompt, enter the filename."
  (interactive)
  (insert (format "[[%s]]" (org-link-complete-file))))
;;
(map! :after org
      :map org-mode-map
      :localleader
      "l f" #'+org-insert-file-link)
#+end_src
* DIRED 配置

* 其他包配置
** ivy-rich：显示命令的详细描述
#+begin_src emacs-lisp
(require 'ivy-rich)
(ivy-rich-mode 1)
(setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
#+end_src
** find-file-in-project：陈斌的插件，用于在项目中快速找到文件
#+begin_src emacs-lisp
(require 'find-file-in-project)
(ivy-mode 1)
(setq ffip-project-root "~/Org-Notes")
#+end_src
** Eros
#+begin_quote
来自:tool eval
#+end_quote
#+begin_src emacs-lisp
(setq eros-eval-result-prefix "⟹ ") ; default =>
#+end_src
** Company
来自:completion company
#+begin_src emacs-lisp
(after! company
  (setq company-idle-delay 0.5
        company-minimum-prefix-length 2)
  (setq company-show-numbers t)
  (add-hook 'evil-normal-state-entry-hook #'company-abort)) ;; make aborting less annoying.
;;增强history
(setq-default history-length 1000)
(setq-default prescient-history-length 1000)
#+end_src
** YASnippets
来自:editor snippets，开启 snippets 嵌套支持
#+begin_src emacs-lisp
(setq yas-triggers-in-field t)
#+end_src
** Smart Parentheses
来自:core packages，增加 org-mode 的配对
#+begin_src emacs-lisp
(sp-local-pair
 '(org-mode)
 "<<" ">>"
 :actions '(insert))
#+end_src
** Keycast
在 modeline 中显示按键
#+begin_src emacs-lisp
(use-package! keycast
    :ensure t
    :commands (keycast-mode)
    :config
    (setq keycast-separator-width 1)
    (setq keycast-mode-line-remove-tail-elements nil)
    (setq keycast-mode-line-insert-after 'mode-line-buffer-identification)
    (dolist (input '(self-insert-command
                     org-self-insert-command))
      (add-to-list 'keycast-substitute-alist `(,input "." "Typing…")))
    (dolist (event '(mouse-event-p
                     mouse-movement-p
                     mwheel-scroll))
      (add-to-list 'keycast-substitute-alist `(,event nil))))
#+end_src
** Org-modern
一个 org 样式美化包
#+begin_src emacs-lisp
(use-package! org-modern
  :hook (org-mode . org-modern-mode)
  :config
  (setq org-modern-star '("◉" "○" "✸" "✿" "✤" "✜" "◆" "▶")
        org-modern-table-vertical 1
        org-modern-table-horizontal 0.2
        org-modern-list '((43 . "➤")
                          (45 . "–")
                          (42 . "•"))
        org-modern-todo-faces
        '(("TODO" :inverse-video t :inherit org-todo)
          ("PROJ" :inverse-video t :inherit +org-todo-project)
          ("STRT" :inverse-video t :inherit +org-todo-active)
          ("[-]"  :inverse-video t :inherit +org-todo-active)
          ("HOLD" :inverse-video t :inherit +org-todo-onhold)
          ("WAIT" :inverse-video t :inherit +org-todo-onhold)
          ("[?]"  :inverse-video t :inherit +org-todo-onhold)
          ("KILL" :inverse-video t :inherit +org-todo-cancel)
          ("NO"   :inverse-video t :inherit +org-todo-cancel))
        org-modern-footnote
        (cons nil (cadr org-script-display))
        org-modern-block-fringe nil
        org-modern-block-name
        '((t . t)
          ("src" "»" "«")
          ("example" "»–" "–«")
          ("quote" "❝" "❞")
          ("export" "⏩" "⏪"))
        org-modern-progress nil
        org-modern-priority nil
        org-modern-horizontal-rule (make-string 36 ?─)
        org-modern-keyword
        '((t . t)
          ("title" . "𝙏")
          ("subtitle" . "𝙩")
          ("author" . "𝘼")
          ("email" . #("" 0 1 (display (raise -0.14))))
          ("date" . "𝘿")
          ("property" . "☸")
          ("options" . "⌥")
          ("startup" . "⏻")
          ("macro" . "𝓜")
          ("bind" . #("" 0 1 (display (raise -0.1))))
          ("bibliography" . "")
          ("print_bibliography" . #("" 0 1 (display (raise -0.1))))
          ("cite_export" . "⮭")
          ("print_glossary" . #("ᴬᶻ" 0 1 (display (raise -0.1))))
          ("glossary_sources" . #("" 0 1 (display (raise -0.14))))
          ("include" . "⇤")
          ("setupfile" . "⇚")
          ("html_head" . "🅷")
          ("html" . "🅗")
          ("latex_class" . "🄻")
          ("latex_class_options" . #("🄻" 1 2 (display (raise -0.14))))
          ("latex_header" . "🅻")
          ("latex_header_extra" . "🅻⁺")
          ("latex" . "🅛")
          ("beamer_theme" . "🄱")
          ("beamer_color_theme" . #("🄱" 1 2 (display (raise -0.12))))
          ("beamer_font_theme" . "🄱𝐀")
          ("beamer_header" . "🅱")
          ("beamer" . "🅑")
          ("attr_latex" . "🄛")
          ("attr_html" . "🄗")
          ("attr_org" . "⒪")
          ("call" . #("" 0 1 (display (raise -0.15))))
          ("name" . "⁍")
          ("header" . "›")
          ("caption" . "☰")
          ("results" . "🠶")))
  (custom-set-faces! '(org-modern-statistics :inherit org-checkbox-statistics-todo)))
#+end_src
